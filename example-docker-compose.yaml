version: "3.8"

services:
    web:
        image: nginx:alpine
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - web_data:/var/www/html
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        networks:
            - frontend
            - backend
        environment:
            - NGINX_HOST=localhost
            - NGINX_PORT=80
        depends_on:
            - app
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.web.rule=Host(`localhost`)"

    app:
        build:
            context: .
            dockerfile: Dockerfile
        volumes:
            - app_data:/var/www/html
            - ./src:/var/www/html/src
        networks:
            - backend
        environment:
            DATABASE_URL: mysql://user:password@db:3306/app
            REDIS_URL: redis://redis:6379
        depends_on:
            - db
            - redis
        command: ["php-fpm"]
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    db:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: rootpassword
            MYSQL_DATABASE: app
            MYSQL_USER: user
            MYSQL_PASSWORD: password
        volumes:
            - db_data:/var/lib/mysql
        networks:
            - backend
        ports:
            - "3306:3306"
        restart: always

    redis:
        image: redis:alpine
        networks:
            - backend
        volumes:
            - redis_data:/data
        command: redis-server --appendonly yes

networks:
    frontend:
        driver: bridge
        labels:
            - "com.example.description=Frontend network"
    backend:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16

volumes:
    web_data:
        driver: local
        labels:
            - "com.example.description=Web data volume"
    app_data:
        driver: local
    db_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /data/mysql
    redis_data:
        external: true

configs:
    nginx_config:
        file: ./config/nginx.conf
        labels:
            - "com.example.description=Nginx configuration"

secrets:
    db_password:
        file: ./secrets/db_password.txt
    api_key:
        external: true
